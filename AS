import numpy as np
import random
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import time

# Parámetros del barco
capacidad_barco = 200  # toneladas de capacidad

# Parámetros de Ant System
n_hormigas = 50
alpha = 1  # Influencia de las feromonas
beta = 2  # Influencia de la heurística (distancia)
evaporacion = 0.5  # Tasa de evaporación de feromonas
feromonas_inicial = 1.0  # Valor inicial de las feromonas
q = 100  # Cantidad de feromona depositada por cada hormiga

# Definir áreas de pesca fijas
def definir_areas_pesca():
    posiciones = np.array([
        [10, 20], [20, 30], [30, 40], [40, 50], [50, 60],
        [60, 70], [70, 80], [80, 90], [90, 20], [20, 80]
    ])
    clima = np.array([5, 3, 8, 2, 6, 4, 7, 1, 9, 3])  # Índices fijos de clima
    oleaje = np.array([3, 5, 2, 6, 4, 7, 8, 5, 3, 6])  # Índices fijos de oleaje
    peces = np.array([100, 80, 120, 90, 110, 95, 85, 70, 130, 60])  # Cantidad fija de peces en cada área
    return posiciones, clima, oleaje, peces

# Función para calcular la distancia euclidiana entre dos puntos
def calcular_distancia(p1, p2):
    return np.sqrt(np.sum((p1 - p2) ** 2))

# Función para evaluar la calidad de una ruta
def evaluar_ruta(ruta, posiciones, clima, oleaje, peces, capacidad_barco):
    distancia_total = 0
    peces_recolectados = 0
    carga_total = 0
    clima_total = 0
    oleaje_total = 0
    
    for i in range(len(ruta) - 1):
        # Calcular la distancia
        distancia_total += calcular_distancia(posiciones[ruta[i]], posiciones[ruta[i + 1]])
        
        # Sumar condiciones climáticas y oleaje
        clima_total += clima[ruta[i]]
        oleaje_total += oleaje[ruta[i]]
        
        # Recolectar peces si no excede la capacidad del barco
        if carga_total + peces[ruta[i]] <= capacidad_barco:
            peces_recolectados += peces[ruta[i]]
            carga_total += peces[ruta[i]]
    
    # Sumar la distancia de regreso al punto de partida
    distancia_total += calcular_distancia(posiciones[ruta[-1]], posiciones[ruta[0]])
    
    return peces_recolectados, clima_total, oleaje_total, distancia_total

# Inicializar feromonas
def inicializar_feromonas(n_areas):
    return np.full((n_areas, n_areas), feromonas_inicial)

# Función para actualizar las feromonas
def actualizar_feromonas(feromonas, rutas, resultados, evaporacion):
    feromonas *= (1 - evaporacion)
    for i, ruta in enumerate(rutas):
        for j in range(len(ruta) - 1):
            feromonas[ruta[j], ruta[j + 1]] += q / resultados[i]['distancia_total']
    return feromonas

# Construir una solución para una hormiga
def construir_ruta(posiciones, feromonas, n_areas, alpha, beta):
    ruta = [random.randint(0, n_areas - 1)]
    visitado = set(ruta)
    
    for _ in range(n_areas - 1):
        actual = ruta[-1]
        probabilidades = []
        
        for siguiente in range(n_areas):
            if siguiente not in visitado:
                tau = feromonas[actual, siguiente] ** alpha
                eta = (1 / calcular_distancia(posiciones[actual], posiciones[siguiente])) ** beta
                probabilidades.append(tau * eta)
            else:
                probabilidades.append(0)
        
        probabilidades = np.array(probabilidades)
        probabilidades /= probabilidades.sum()
        
        siguiente = np.random.choice(range(n_areas), p=probabilidades)
        ruta.append(siguiente)
        visitado.add(siguiente)
    
    return ruta

# Algoritmo Ant System
def ant_system_pesca(n_iteraciones, n_hormigas, alpha, beta, evaporacion, posiciones, clima, oleaje, peces):
    n_areas = len(posiciones)
    feromonas = inicializar_feromonas(n_areas)
    
    mejor_ruta = None
    mejor_resultado = {'peces_recolectados': 0, 'clima_total': float('inf'), 'oleaje_total': float('inf'), 'distancia_total': float('inf')}
    
    for _ in range(n_iteraciones):
        rutas = []
        resultados = []
        
        for _ in range(n_hormigas):
            ruta = construir_ruta(posiciones, feromonas, n_areas, alpha, beta)
            peces_recolectados, clima_total, oleaje_total, distancia_total = evaluar_ruta(
                ruta, posiciones, clima, oleaje, peces, capacidad_barco
            )
            resultados.append({
                'peces_recolectados': peces_recolectados,
                'clima_total': clima_total,
                'oleaje_total': oleaje_total,
                'distancia_total': distancia_total
            })
            rutas.append(ruta)
        
        # Encontrar la mejor ruta de esta iteración
        for i, resultado in enumerate(resultados):
            if resultado['peces_recolectados'] > mejor_resultado['peces_recolectados']:
                mejor_ruta = rutas[i]
                mejor_resultado = resultado
        
        feromonas = actualizar_feromonas(feromonas, rutas, resultados, evaporacion)
    
    return mejor_ruta, mejor_resultado

# Ejecutar Ant System con áreas de pesca fijas
posiciones, clima, oleaje, peces = definir_areas_pesca()

# Medir el tiempo de ejecución
start_time = time.time()
mejor_ruta_as, mejor_resultado_as = ant_system_pesca(
    n_iteraciones=100, n_hormigas=50, alpha=1, beta=2, evaporacion=0.5,
    posiciones=posiciones, clima=clima, oleaje=oleaje, peces=peces
)
end_time = time.time()
execution_time = end_time - start_time
print(f"Ant System - Mejor ruta: {mejor_ruta_as}, Resultados: {mejor_resultado_as}, Tiempo de ejecución: {execution_time:.4f} segundos")

# Graficar la mejor ruta
fig, ax = plt.subplots(figsize=(10, 10))
line, = ax.plot([], [], 'k--')
points, = ax.plot([], [], 'bo')
time_text = ax.text(0.02, 0.95, '', transform=ax.transAxes)

def init():
    ax.set_xlim(0, 100)
    ax.set_ylim(0, 100)
    ax.set_title(f"Ruta de Pesca Animada: Peces = {mejor_resultado_as['peces_recolectados']}, Clima = {mejor_resultado_as['clima_total']}, Oleaje = {mejor_resultado_as['oleaje_total']}, Distancia = {mejor_resultado_as['distancia_total']:.2f}")
    ax.set_xlabel('Coordenada X')
    ax.set_ylabel('Coordenada Y')
    time_text.set_text('')
    return line, points, time_text

def update(i):
    xdata = [posiciones[r][0] for r in mejor_ruta_as[:i+1]]
    ydata = [posiciones[r][1] for r in mejor_ruta_as[:i+1]]
    line.set_data(xdata, ydata)
    points.set_data(xdata, ydata)
    tiempo = i * 5
    time_text.set_text(f'Tiempo: {tiempo} unidades')
    return line, points, time_text

ani = FuncAnimation(fig, update, frames=len(mejor_ruta_as), init_func=init, blit=True, repeat=False)
plt.show()
